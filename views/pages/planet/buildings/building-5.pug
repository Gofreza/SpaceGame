extends ../../../layouts/base

block css
    link(rel='stylesheet', href='/CSS/buildings/buildings.css')
    link(rel='stylesheet', href='/CSS/buildings/yard.css')
block layout-content
    .page-container
        .ship-container#reference-div
            a(href="/building-page/4") To Space Hangar
            if isCraft
                p Ships: #{nbShips}/#{maxShips}*
            else
                p Ships: #{nbShips}/#{maxShips}
            .ship-list
                if ship !== null
                    each ship in ships
                        .ship-box
                            table
                                tr
                                    td
                                        img.ship-image(src=ship.img_src)
                                    td
                                        .ship-info
                                            each value, key in ship
                                                if key !== "img_src" && key !== "print_order"
                                                    .ship-property
                                                        case key
                                                            when "name"
                                                                span <b><u>#{value}</u></b>
                                                            when "life"
                                                                span PV: #{value}
                                                            when "armor"
                                                                span Armor: #{value}
                                                            when "shield"
                                                                span Shield: #{value}
                                                            when "storage_capacity"
                                                                span Hold Capacity: #{value}
                                                            when "speed"
                                                                span Speed: #{value}
                                                            when "damage"
                                                                span Damage: #{value}
                                                            when "crafting_time"
                                                                - const craftingTime = parseInt(value.replace(/\s/g, ''))/60000
                                                                span Build Time: #{craftingTime} min
                                        // Find the costs associated with this ship
                                        - const shipCosts = costs.find(cost => cost.name === ship.name)
                                    td
                                        .ship-info
                                            span
                                                | <b><u>Building Costs : </u></b>
                                            if shipCosts
                                                each val, cle in shipCosts
                                                    case cle
                                                        when "steel"
                                                            span Steel: #{val}
                                                        when "components"
                                                            span Components: #{val}
                                                        when "plastic"
                                                            span Plastic: #{val}
                                                        when "money"
                                                            span Money: #{val}
                                                        when "population"
                                                            span Population: #{val}
                                        .horizontal-container
                                            form(id=`craftForm-${ship.name}` data-ship-name=`${ship.name}` action="/crafting" method="POST")
                                                textarea(id=`craft-${ship.name}` name="craftArea" rows="1" cols="10" maxlength="6") 1
                                                input(type="hidden" name="costs" value=shipCosts)
                                                button(type="button" class="buttonCraft" id=`buttonCraft-${ship.name}`) Craft
                            .timer-container
                                span(id=`timer-${ship.name}` style="display:none;") Timer: &nbsp;
                                span(id=`countdown-${ship.name}` style="display:none;")

        .resources-container
            .to-fixe
            .resources#fixedResources
                table
                    tr
                        td Iron :
                        td#iron #{resources.iron}
                    tr
                        td Steel :
                        td#steel #{resources.steel}
                    tr
                        td Copper :
                        td#copper #{resources.copper}
                    tr
                        td Component :
                        td#components #{resources.components}
                    tr
                        td Petrol :
                        td#petrol #{resources.petrol}
                    tr
                        td Plastic :
                        td#plastic #{resources.plastic}
                    tr
                        td Money :
                        td#money #{resources.money}
                    tr
                        td Crystal :
                        td#crystal #{resources.crystal}
            .population#fixedPopulation
                table
                    tr
                        td Population
                    tr
                        td Current Pop :
                        td#currentPop #{population.current_pop.current_pop}
                    tr
                        td Worker Pop :
                        td#workerPop #{population.worker_pop.worker_pop}
                    tr
                        td Free Pop :
                        td#freePop #{population.free_pop.free_pop}
    script(src="/JS/resources.js")
    script(src="/JS/population.js")
    script.
        document.addEventListener('DOMContentLoaded', () => {
            document.addEventListener('click', (event) => {
                if (event.target.classList.contains('buttonCraft')) {
                    const shipName = event.target.parentElement.getAttribute('data-ship-name');
                    //console.log("name", shipName)
                    const formId = `craftForm-${shipName}`;
                    document.getElementById(formId).submit();
                }
            });

            // JavaScript code to calculate and display countdowns
            const data = !{JSON.stringify(crafts)};
            data.forEach(item => {
                const completionTime = new Date(item.completion_time);
                const now = new Date();

                let timeRemaining = completionTime - now;

                const countdownElement = document.getElementById(`countdown-${item.ship_name}`);
                const timerElement = document.getElementById(`timer-${item.ship_name}`);

                let interval;

                const updateCounter = () => {
                    const remainingDuration = new Date(timeRemaining);

                    const hours = remainingDuration.getUTCHours();
                    const minutes = remainingDuration.getUTCMinutes();
                    const seconds = remainingDuration.getUTCSeconds();

                    if (timeRemaining <= 0) {
                        clearInterval(interval);
                        countdownElement.innerHTML = 'Crafting Complete';
                    }else {
                        countdownElement.innerHTML = `${hours}h ${minutes}m ${seconds}s`;
                        countdownElement.style.display = 'inline'
                        countdownElement.style.paddingTop = '10px'
                        timerElement.style.display = 'inline';
                        timerElement.style.paddingTop = '10px'
                    }

                    timeRemaining -= 1000;
                };

                updateCounter();
                interval = setInterval(updateCounter, 1000);
            });
            // Get a reference to the reference div and the fixed div
            const referenceDiv = document.getElementById("reference-div");
            const fixedDivResources = document.getElementById("fixedResources");
            const fixedDivPopulation = document.getElementById("fixedPopulation");

            // Calculate the position of the fixed div based on the reference div
            function calculateFixedDivPosition() {
                // Get the position of the reference div
                const referenceDivRect = referenceDiv.getBoundingClientRect();
                const resourcesDivRect = fixedDivResources.getBoundingClientRect()

                // Calculate the position for the fixed div
                const fixedDivResourcesTop = referenceDivRect.top + window.scrollY;
                const fixedDivResourcesRight = referenceDivRect.left + window.scrollY;

                const fixedDivPopulationTop = resourcesDivRect.bottom + window.scrollY;
                const fixedDivPopulationRight = referenceDivRect.left + window.scrollY;

                // Apply the calculated position to the fixed div
                fixedDivResources.style.top = fixedDivResourcesTop + "px";
                fixedDivResources.style.right = fixedDivResourcesRight + "px";

                fixedDivPopulation.style.top = fixedDivPopulationTop + "px";
                fixedDivPopulation.style.right = fixedDivPopulationRight + "px";

            }

            // Call the function to calculate the initial position
            calculateFixedDivPosition();

            // Add an event listener to re-calculate the position if the window is resized
            window.addEventListener("resize", calculateFixedDivPosition);


        });



